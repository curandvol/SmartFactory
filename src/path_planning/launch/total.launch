<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- 1) 기본 인자 및 시뮬레이션 설정 -->
  <arg name="model"        default="burger"/>
  <arg name="world"        default="$(env HOME)/SmartFactory/src/gazebo/my_factory.world"/>
  <arg name="map_center_x" default="0.499"/>
  <arg name="map_center_y" default="-2.269"/>
  <arg name="pgm_path"     default="$(find path_planning)/maps/Factory/Factory.pgm"/>
  <arg name="map_yaml"     default="$(find path_planning)/maps/Factory/Factory.yaml"/>
  <param name="use_sim_time" value="true"/>

  <!-- 2) Gazebo 빈 월드 (Factory 맵) -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="gui"        value="true"/>
    <arg name="use_sim_time" value="true"/>
  </include>

  <!-- 3) map_server + goals 로드 -->
  <node pkg="map_server" type="map_server" name="map_server" output="screen"
        args="$(arg map_yaml)"/>
  <rosparam file="$(find path_planning)/goals/Factory_goals.yaml" command="load"/>

  <!-- 4) static TF: map → odom 초기화 -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" output="screen"
        args="-3.408 -4.407 0 0 0 -0.710 map odom 100"/>

  <!-- 5) URDF 로딩 + 스폰 -->
  <param name="robot_description"
       command="$(find xacro)/xacro $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro prefix:=robot_1_" />


  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" output="screen"
      launch-prefix="bash -c 'sleep 5; exec $0 $@'"
      args="-param robot_description
            -urdf
            -model robot_1
            -robot_namespace /robot_1
            -reference_frame map
            -x -3.408 -y -4.407 -z 0.1 -Y -0.710"/>

  <!-- 6) Solo Planner (grid 중앙, PGM/YAML 전달) -->
  <node pkg="path_planning" type="solo_path_planner_node.py" name="path_planner" output="screen">
    <param name="map_center_x" value="$(arg map_center_x)"/>
    <param name="map_center_y" value="$(arg map_center_y)"/>
    <param name="pgm_path"     value="$(arg pgm_path)"/>
    <param name="map_yaml"     value="$(arg map_yaml)"/>
  </node>

  <!-- 7) robot_1 네임스페이스: TF→AMCL→Path Follower만 -->
  <group ns="robot_1">
   <!-- 7.0) joint_state_publisher (가제보에서 퍼블리시 안 할 경우 필수) -->
    <node pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" name="joint_state_publisher" output="screen"/>

   <!-- 7.1) robot_state_publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="state_pub" output="screen">
     <param name="tf_prefix" value="robot_1"/>
    </node>
    <!-- 7.2) AMCL (scan 구독), base_frame_id 수정 -->
    <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <param name="odom_frame_id"   value="odom"/>
      <param name="base_frame_id"   value="base_footprint"/>
      <param name="global_frame_id" value="map"/>
      <param name="use_map_topic"   value="true"/>
      <remap from="scan" to="scan"/>
      <remap from="tf" to="/tf"/>
      <remap from="tf_static" to="/tf_static"/>
    </node>

    <!-- 7.3) Path Follower (절대 cmd_vel 퍼블리시 유지) -->
    <node pkg="path_planning" type="path_follower_node.py" name="path_follower" output="screen">
      <param name="robot_id" value="robot_1"/>
    </node>
  </group>

  <!-- 8) RViz -->
  <node pkg="rviz" type="rviz" name="rviz" output="screen"
        args="-d $(find path_planning)/rviz/it2_last.rviz"/>
</launch>

